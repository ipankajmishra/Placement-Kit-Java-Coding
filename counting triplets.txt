import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

public class Solution{

     public static void findAllTriplets(int[] A,int[] uu,int r)
    {
        int  count=0;
        if (A.length < 3) {
            return;
        }
        Map<Integer,Integer> map = new HashMap<>();
        // One by fix every element as middle element
        for (int j = 1; j < A.length - 1; j++)
        {
            // Initialize i and k for the current j
            int i = j - 1, k = j + 1;

            // Find all i and k such that (i, j, k) forms a triplet of GP
            while (true)
            {
                // if A[j]/A[i] = r and A[k]/A[j] = r and
                // r is an integer (i, j, k) forms GP
                while (i >= 0 && k <= A.length - 1 &&
                        (A[j] % A[i] == 0) && (A[k] % A[j] == 0) &&
                        (A[j] / A[i] == r && A[k] / A[j] == r))
                {
                    // print the triplet
                    //System.out.println(A[i] + " " + A[j] + " " + A[k]);
                    
                    if(!map.containsKey(A[i]))
                    {
                        map.put(A[i],1);
                    }
                    else{
                        int tt = map.get(A[i]);
                        map.put(A[i],tt+1);
                    }
                    
                    if(!map.containsKey(A[j]))
                    {
                        map.put(A[j],1);
                    }
                    else{
                        int tt = map.get(A[j]);
                        map.put(A[j],tt+1);
                    }
                    
                    if(!map.containsKey(A[k]))
                    {
                        map.put(A[k],1);
                    }
                    else{
                        int tt = map.get(A[k]);
                        map.put(A[k],tt+1);
                    }
                    // Since the array is sorted and elements are distinct
                    k++;
                    i--;
                    count++;
                }

                if (i < 0 || k >= A.length) {
                    break;
                }

                // if A[j] is multiple of A[i] and A[k] is multiple of A[j],
                // then A[j] / A[i] != A[k] / A[j]. We compare their values
                // to move to next k or previous i
                if (A[j] % A[i] == 0 && A[k] % A[j] == 0)
                {
                    if (A[j] / A[i] < A[k] / A[j]) {
                        i--;
                    }
                    else {
                        k++;
                    }
                }

                // else if A[j] is multiple of A[i], then
                // try next k. Else, try previous i.
                else if (A[j] % A[i] == 0) {
                    k++;
                }
                else {
                    i--;
                }
            }
        }
        List<Integer> list0 = new ArrayList<Integer>(map.keySet());
        List<Integer> list1 = new ArrayList<Integer>();
        int uuu[] = new int[list0.size()];
        Collections.sort(list0);
        for(int e=0;e<list0.size();e++)
        {
            list1.add(map.get(list0.get(e)));
            uuu[e]=map.get(list0.get(e));
        }
        //System.out.println(map);
        //System.out.println(list0);
        //System.out.println(list1);
        //System.out.println(Arrays.toString(uuu));
        
        
        for(int c=0;c<uu.length;c++)
        {
            if(uu[c]>1)
            {
                count=count+((uu[c]*uuu[c])/2);
            }
        }
        System.out.print(count);
    }

    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        String strr = sc.nextLine();
        //System.out.println(strr);
        String[] strrr = strr.split(" ");
        int n = Integer.parseInt(strrr[0]);
        int r = Integer.parseInt(strrr[1]);
        //[] A = { 1, 3, 9, 9, 27, 81 };
        int[] A = new int[n];
        for(int d=0;d<n;d++)
        {
            A[d]=sc.nextInt();
        }
        //System.out.print(Arrays.toString(A));
        //int r = 3;
        String ss = "";
        
        for(int b=0;b<A.length;b++)
        {
            ss=ss+A[b]+" ";
        }
        Map<Integer,Integer> mapp = new HashMap<>();
        for(int o=0;o<A.length;o++)
        {
            if(!mapp.containsKey(A[o]))
            {
                mapp.put(A[o],1);  
            }
            else
            {
                int tmp = mapp.get(A[o]);
                mapp.put(A[o],tmp+1);
            }
        }
        List<Integer> list00 = new ArrayList<Integer>(mapp.keySet());
        Collections.sort(list00);
        List<Integer> list2= new ArrayList<Integer>();
        int[] uu = new int[list00.size()];
        for(int u=0;u<list00.size();u++)
        {
            list2.add(mapp.get(list00.get(u)));
            uu[u]=mapp.get(list00.get(u));
        }
        //System.out.println(list2);
        //System.out.println(Arrays.toString(uu));

        String[] B = ss.split(" ");
        LinkedHashSet<String> set = new LinkedHashSet<String>(Arrays.asList(B));
        int[] BB = new int[set.size()];
        List<String> list3 = new ArrayList<String>(set);
        for(int h=0;h<set.size();h++)
        {
            BB[h]=Integer.parseInt(list3.get(h));
        }
        //System.out.println(set);
        //System.out.println(BB.length);
        //System.out.println(Arrays.toString(BB));
        findAllTriplets(BB,uu,r);
    }
} 
