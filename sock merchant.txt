import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the sockMerchant function below.
    static int sockMerchant(int n, int[] ar) {
    int sum=0;
    HashSet<Integer> set = new HashSet<>();
    for (int i=0; i<ar.length; i++) 
        { 
            // If not present, then put it in hashtable and print it 
            if (!set.contains(ar[i])) 
            { 
                set.add(ar[i]); 
                
            } 
        } 
        //return set.size();
        Integer[] array = new Integer[set.size()];
        set.toArray(array);
        for(int i=0;i<array.length;i++)
        {
            int count=0;
            for(int j=0;j<ar.length;j++)
            {
                if(array[i]==ar[j])
                {
                    count=count+1;
                }
            }
            count =count/2;
            sum=sum+count ;
        }
        return sum;
    


    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] ar = new int[n];

        String[] arItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int arItem = Integer.parseInt(arItems[i]);
            ar[i] = arItem;
        }

        int result = sockMerchant(n, ar);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
